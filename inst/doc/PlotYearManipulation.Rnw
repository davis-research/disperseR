\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}

\title{Making Individual Plot-Year Maps From Long-Term Data}
\author{Samantha L. Davis}
\maketitle

\section{Introduction}

I need to make individual plot maps as they were in Year X (each of their measurement years, up to 7), which accurately represent the number of trees currently present in the plot, alongside their DBH measures if necessary. We have a few different types of trees that are present in the dataset.
\begin{enumerate}
  \item Trees that were present before plot establishment as seedlings
  \item Trees that were present before plot establishment as adults
  \item Trees that were present before plot establishment as seedlings that died
  \item Trees that were present before plot establishment as adults that died
  \item Trees that appeared after plot establishment as seedlings that died
  \item Trees that appeared after plot establishment as seedlings that survived
  \item Seedlings that established and then died before DBH measure could be taken
  \item Trees (saplings) that established then got too small for DBH before death
\end{enumerate}

So, I think I need to do a loop for each of the 13,000 rows in ssdAllTrees. I should split them into groups, so that I know all NA's in DBH are expected because the tree is too small to measure, instead of it being measurements not taken yet. Also, let's switch the order of columns so that the xy columns are NOT last. That way, we have a definite number of columns before the dbh columns start.

<<>>=
## load library
library(disperseR)


##subsetting by years sampled
sevenyears <- ssdAllTrees[ssdAllTrees$plot=="bellow" |
                            ssdAllTrees$plot=="palate" |
                            ssdAllTrees$plot=="reclusive" |
                            ssdAllTrees$plot=="octane" |
                            ssdAllTrees$plot=="artist",]

sixyears <- ssdAllTrees[ssdAllTrees$plot=="trigger" |
                            ssdAllTrees$plot=="rigid",]

fiveyears <- ssdAllTrees[ssdAllTrees$plot=="crackers" |
                            ssdAllTrees$plot=="trinity" |
                            ssdAllTrees$plot=="realtor" |
                            ssdAllTrees$plot=="sodium" |
                            ssdAllTrees$plot=="distress" |
                            ssdAllTrees$plot=="gravy" |
                            ssdAllTrees$plot=="chestnut",]

## check to make sure all trees are accounted for
(nrow(sevenyears) + nrow(sixyears) + nrow(fiveyears) == nrow(ssdAllTrees))

## delete the extraneous columns from sixyears and fiveyears
fiveyears <- fiveyears[,-c(15,16)]
sixyears <- sixyears[,-16]
@

Okay, so I now have three dataframes with DBH values that can be acted upon for each year. Let's get to writing this function. It should take a vector, which is a row of the dataframe. We know the identities of each of the first 9 columns for this vector, and the rest are to be dealt with in a loop. This function should output a data.frame that can be bound to a response data.frame. This response data.frame should be organized like so: Plot Name, Subplot, Tag, Species, Measure Year, Ingrowth Year, First Record Year, Death Year, x, y, DBH, Class

We need the plot, to look up sampling years. The other early columns just need to tag along, we don't need any information from them.  If the ingrowth year is NA, that means that the tree was present in the plot before it was established. Now, in these plots, trees are checked yearly for establishment and death, but only measured every few years. What we know from ingrowth year, then, is the year that a seedling germinated and established. If ingrowth year is NOT NA, then we know the tree's entire life history, from the moment it was ``born'', and we can build the rows based on that.

If ingrowth year is NA, it gets a bit trickier. To deal with this, we can do a check. If there's no ingrowthyear, that means that the tree was alive before plot establishment. Therefore, we can make an assumption that if its first dbh value is NA, then it was too small to measure, e.g., a seedling. Otherwise, it's already a tree.

Wrapping all of this into a giant for loop, we can expand our ssdAllTrees data.frame to a df better suited for dispersal analysis
<<>>=
## get values where ingrowthyear has a value, for testing
samplerows <- head(ssdAllTrees[!is.na(ssdAllTrees$ingrowthyear),])
## add in rows that have no ingrowth year
samplerows <- rbind(samplerows,
                    head(ssdAllTrees[is.na(ssdAllTrees$ingrowthyear),]))
##add in rows that have no ingrowthyear but DO have a mortality year
samplerows <- rbind(samplerows,
                    head(ssdAllTrees[is.na(ssdAllTrees$ingrowthyear) &
                                       !is.na(ssdAllTrees$mortalityyear),]))

## make the function

processTreeRows <- function(samplerows, ssdPlotDesc, ssdAllTrees){
i <- 1
j <- 1

    finalrows <- data.frame(plot="dummy",
                            subplot="dummy",
                            treeid="dummy",
                            species="dummy",
                            ingrowth="dummy",
                            firstrec="dummy",
                            deathyear="dummy",
                            x="dummy",
                            y="dummy",
                            measyear="dummy",
                            dbh="dummy",
                            stage="dummy",
                            stringsAsFactors=FALSE
                            )
for(i in 1:nrow(samplerows)){
  ##get plot measurement years
    plotYears <- (ssdPlotDesc[ssdPlotDesc$plot==samplerows[i, "plot"], 5:11])
  ## make a dataframe of dbh1-7 and year values to search later
    rPlotYears <- as.data.frame(cbind(paste("dbh", 1:7, sep=""),
                                      as.numeric(plotYears[1,])),
                                stringsAsFactors=FALSE,
                                na.string="NA")
  ## clean it up a bit
    colnames(rPlotYears) <- c("colname", "year")
    ##get only years where there are acutally values
      years <- plotYears[!is.na(plotYears)]

  ## if there is an ingrowth year in this particular row...
  if(!is.na(samplerows[i,"ingrowthyear"])){
    ## remove any years that are less than that.
      years <- years[years >= samplerows[i, "ingrowthyear"]]
    ## remember that this row is a seedling at least once
      class <- "seedling"
  } else{
    ## if it was NA, mark it as seedling
      if(is.na(samplerows[i, "dbh1"])){
        class <- "seedling"
      } else{
        class <- "tree"
      } ## end else
  } ##end else


  ## is there a mortalityyear
  if(!is.na(samplerows[i, "mortalityyear"])){
    ## remove any years greater than mortality year
      years <- years[years < samplerows[i, "mortalityyear"]]
    ## remember that this tree died
    ## this is currently unused, but we may need it later
      dead <- TRUE
  }
      ##if a seedling died before it could be officially measured
    if(length(years)==0){
          addedrow <- NULL
          addedrow <- data.frame(plot=samplerows[i, "plot"],
                        subplot=samplerows[i, "subplot"],
                        treeid=samplerows[i, "treeid"],
                        species=samplerows[i, "sppcode"],
                        ingrowth=samplerows[i, "ingrowthyear"],
                        firstrec=samplerows[i, "yearfirstrecorded"],
                        deathyear=samplerows[i, "mortalityyear"],
                        x=samplerows[i, "xcoord"],
                        y=samplerows[i, "ycoord"],
                        measyear=samplerows[i, "yearfirstrecorded"],
                        dbh=NA,
                        stage="seedling",
                        stringsAsFactors=FALSE
                        )

          finalrows <- rbind(finalrows, addedrow)

    } else{
      ## so, for each year that we have measurements...
      for(j in 1:length(years)){
        ##find which dbh column to use
          colname <- rPlotYears[rPlotYears$year==years[j],"colname"]
        ## clean it up because R sucks
          colname <- colname[!is.na(colname)]
        ## select that dbh value
          dbh <- as.numeric(samplerows[i, colname])
          ## make sure we don't label a tree as a seedling more than once
          if(j > 1 & class=="seedling"){
            class <- "tree"
          }
        ## build row for new table.
        addedrow <- NULL
          addedrow <- data.frame(plot=samplerows[i, "plot"],
                        subplot=samplerows[i, "subplot"],
                        treeid=samplerows[i, "treeid"],
                        species=samplerows[i, "sppcode"],
                        ingrowth=samplerows[i, "ingrowthyear"],
                        firstrec=samplerows[i, "yearfirstrecorded"],
                        deathyear=samplerows[i, "mortalityyear"],
                        x=samplerows[i, "xcoord"],
                        y=samplerows[i, "ycoord"],
                        measyear=years[j],
                        dbh=dbh,
                        stage=class,
                        stringsAsFactors=FALSE
                        )
          #print(addedrow)
          ## do the rbind
          finalrows <- rbind(finalrows, addedrow)
      } ## end j loop
    }##end seedling loop
}## end i loop
return(finalrows[-1,])
}## end function

## use the function
finalrows <- processTreeRows(samplerows, ssdPlotDesc, ssdAllTrees)

head(finalrows)
tail(finalrows)
nrow(finalrows)
@

Ok, so the tests seem to work, in that the stage value seems to be correct in all cases; that we don't have records for trees before they were alive; and that we don't have records for trees after they were dead. Let's go ahead and do it to a larger dataframe.

<<>>=
palate <- processTreeRows(ssdAllTrees[ssdAllTrees$plot=="palate",], ssdPlotDesc, ssdAllTrees)
str(palate)
nrow(palate)
head(palate)
tail(palate)
@

The run time on this is not great, so we need to do it outside of the Sweave document. I'll save it all as an R object for the package. The R-object is entitled ``expandedTrees'' and can be loaded directly after the package loads. Keep in mind that the messy x/y coordinates are just because of a conversion to character, and I cleaned those up in the final dataset. I also converted everything back to numeric where necessary.
<<>>=

## responses <- list()
## for(i in 1:length(plotnames)){ responses[[plotnames[i]]] <- processTreeRows(ssdAllTrees[ssdAllTrees$plot==plotnames[i],], ssdPlotDesc, ssdAllTrees)}
## expandedTrees <- rbind(responses[[1]], responses[[2]], responses[[3]], responses[[4]], responses[[5]], responses[[6]], responses[[7]], responses[[8]], responses[[9]], responses[[10]], responses[[11]], responses[[12]])
##
head(expandedTrees)
str(expandedTrees)
@

I'm not going to incorporate the script above into the package itself, because the type of code that an individual needs to do to get their plots into the appropriate format will differ based on what they start with. In other words, I don't think the monstrosity of code above is really reusable. It will, however, serve as a record of how I generated the expandedTrees table.

\end{document}
